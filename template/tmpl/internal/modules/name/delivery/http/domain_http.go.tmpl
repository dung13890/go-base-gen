{{/*
Copyright (c) 2023 dung13890. All rights reserved.
Mit License (MIT)
*/}}

{{define "internal/modules/name/delivery/http/domain_http.go"}}package http

import (
	"net/http"
	"strconv"

	"{{.Project}}/internal/domain"
	"{{.Project}}/pkg/errors"

	"github.com/labstack/echo/v4"
)

// {{.Domain | capitalize}}Handler represent the http handler
type {{.Domain | capitalize}}Handler struct {
	Usecase domain.{{.Domain | capitalize}}Usecase
}

// Index will fetch data
func (hl *{{.Domain | capitalize}}Handler) Index(c echo.Context) error {
	ctx := c.Request().Context()
	items, err := hl.Usecase.Fetch(ctx)
	if err != nil {
		return errors.Throw(err)
	}
	itemsRes := make([]{{.Domain | capitalize}}Response, 0)
	for i := range items {
		item := convert{{.Domain | capitalize}}EntityToResponse(&items[i])
		itemsRes = append(itemsRes, item)
	}

	return c.JSON(http.StatusOK, itemsRes)
}

// Show will Find data
func (hl *{{.Domain | capitalize}}Handler) Show(c echo.Context) error {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		return errors.ErrBadRequest.Wrap(err)
	}
	ctx := c.Request().Context()
	item, err := hl.Usecase.Find(ctx, id)
	if err != nil {
		return errors.Throw(err)
	}

	return c.JSON(http.StatusOK, convert{{.Domain | capitalize}}EntityToResponse(item))
}

// Store will create data
func (hl *{{.Domain | capitalize}}Handler) Store(c echo.Context) error {
	request := new({{.Domain | capitalize}}Request)
	if err := c.Bind(request); err != nil {
		return errors.ErrBadRequest.Wrap(err)
	}

	err := c.Validate(request)
	if err != nil {
		return errors.ErrUnprocessableEntity.Wrap(err)
	}

	entity := convert{{.Domain | capitalize}}RequestToEntity(request)

	ctx := c.Request().Context()
	if err := hl.Usecase.Store(ctx, entity); err != nil {
		return errors.Throw(err)
	}

	return c.JSON(http.StatusCreated, {{.Domain | capitalize}}StatusResponse{Status: true})
}
{{end}}
