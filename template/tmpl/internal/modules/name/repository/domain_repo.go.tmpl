{{/*
Copyright (c) 2023 dung13890. All rights reserved.
Mit License (MIT)
*/}}

{{define "internal/modules/name/repository/domain_repo.go"}}package repository

import (
	"context"

	"{{.Project}}/internal/domain"
	"{{.Project}}/pkg/errors"

	"gorm.io/gorm"
)

// {{.Domain | capitalize}}Repository ...
type {{.Domain | capitalize}}Repository struct {
	*gorm.DB
}

// Fetch will fetch content from db
func (rp *{{.Domain | capitalize}}Repository) Fetch(ctx context.Context) ([]domain.{{.Domain | capitalize}}, error) {
	dao := []{{.Domain | capitalize}}{}
	if err := rp.DB.WithContext(ctx).Find(&dao).Error; err != nil {
		return nil, errors.ErrUnexpectedDBError.Wrap(err)
	}

	items := []domain.{{.Domain | capitalize}}{}

	for i := range dao {
		r := convert{{.Domain | capitalize}}ToEntity(&dao[i])
		items = append(items, *r)
	}

	return items, nil
}

// Find will find content from db
func (rp *{{.Domain | capitalize}}Repository) Find(ctx context.Context, id int) (*domain.{{.Domain | capitalize}}, error) {
	dao := {{.Domain | capitalize}}{}
	if err := rp.DB.WithContext(ctx).First(&dao, id).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, errors.ErrNotFound.Wrap(err)
		}
		return nil, errors.ErrUnexpectedDBError.Wrap(err)
	}

	return convert{{.Domain | capitalize}}ToEntity(&dao), nil
}

// Store will create data to db
func (rp *{{.Domain | capitalize}}Repository) Store(ctx context.Context, dm *domain.{{.Domain | capitalize}}) error {
	dao := convert{{.Domain | capitalize}}ToDao(dm)
	if err := rp.DB.WithContext(ctx).Create(&dao).Error; err != nil {
		return errors.ErrUnexpectedDBError.Wrap(err)
	}

	*dm = *convert{{.Domain | capitalize}}ToEntity(dao)

	return nil
}
{{end}}
