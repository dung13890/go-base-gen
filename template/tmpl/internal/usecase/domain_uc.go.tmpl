{{/*
Copyright (c) 2023 dung13890. All rights reserved.
Mit License (MIT)
*/}}

{{define "internal/usecase/domain_uc.go"}}package usecase

import (
	"context"

	"{{.Project}}/internal/domain"
	"{{.Project}}/pkg/errors"
)

// {{.Domain | capitalize}}Usecase ...
type {{.Domain | capitalize}}Usecase struct {
	repo domain.{{.Domain | capitalize}}Repository
}

// New{{.Domain | capitalize}}Usecase will create new an {{.Domain}}Usecase object representation of domain.{{.Domain | capitalize}}Usecase interface
func New{{.Domain | capitalize}}Usecase(repo domain.{{.Domain | capitalize}}Repository) *{{.Domain | capitalize}}Usecase {
	return &{{.Domain | capitalize}}Usecase{
		repo: repo,
	}
}

// Fetch will fetch content from repo
func (uc *{{.Domain | capitalize}}Usecase) Fetch(ctx context.Context) ([]domain.{{.Domain | capitalize}}, error) {
	items, err := uc.repo.Fetch(ctx)
	if err != nil {
		return nil, errors.Throw(err)
	}

	return items, nil
}

// Find will find content from repo
func (uc *{{.Domain | capitalize}}Usecase) Find(ctx context.Context, id int) (*domain.{{.Domain | capitalize}}, error) {
	item, err := uc.repo.Find(ctx, id)
	if err != nil {
		return nil, errors.Throw(err)
	}

	return item, nil
}

// Store will create content from repo
func (uc *{{.Domain | capitalize}}Usecase) Store(ctx context.Context, dm *domain.{{.Domain | capitalize}}) error {
	if err := uc.repo.Store(ctx, dm); err != nil {
		return errors.Throw(err)
	}

	return nil
}
{{end}}
